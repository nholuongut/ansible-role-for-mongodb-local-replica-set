---
# - debug: var=rs_servers
# - debug: var=local_user
# - debug: var=home_dir

- name: Ensure daemon is installed
  command: "which daemon"
  delegate_to: localhost
  ignore_errors: true
  register: daemon_result
  failed_when: daemon_result.rc != 0
  when: true
  tags: ["always"]

# - name: Kill any previous MongoDB Instances
#   command: 'mongo --port {{ item.port }} --eval ''db.adminCommand("shutdown")'''
#   with_items: "{{ rs_servers }}"
#   delegate_to: localhost
#   ignore_errors: true
#   when: true
#   tags: ["always"]

- name: Kill any previous MongoDB Instances
  command: 'killall mongodb'
  with_items: "{{ rs_servers }}"
  delegate_to: localhost
  ignore_errors: true
  when: true
  tags: ["always"]

- name: Remove data directory
  file:
    path: "{{ data_path }}"
    state: absent
  become: true
  delegate_to: localhost
  when: true
  tags: ["rebuild"]

- name: Create Root Data Directories
  file:
    path: "{{ data_path }}"
    state: directory
    owner: "{{ local_user }}"
    group: staff
    recurse: true
    mode: "g+w"
  become: true
  delegate_to: localhost
  tags: ["init", "rebuild"]

- name: Create Agent Directories
  file:
    path: "{{ agents_dir }}"
    state: directory
    owner: "{{ local_user }}"
    group: staff
    recurse: true
    mode: "g+w"
  become: true
  delegate_to: localhost
  tags: ["init", "rebuild"]

- name: Create Individual Directories
  file:
    path: "{{ data_path }}/{{ item.name }}"
    state: directory
    recurse: true
    owner: "{{ local_user }}"
    group: staff
    mode: "g+w"
  with_items: "{{ rs_servers }}"
  become: true
  delegate_to: localhost
  tags: ["init", "rebuild"]

- name: Create MongoDB Configurations
  template:
    src: templates/mongod.conf.j2
    dest: "{{ config_dir }}/mongod-{{ item.name }}.conf"
    owner: "{{ local_user }}"
    group: staff
    mode: "0644"
  with_items: "{{ rs_servers }}"
  become: true
  delegate_to: localhost
  when: true
  tags: ["init", "rebuild", "config"]

- name: Start MongoDB Instances
  command: "daemon -- mongod --replSet rs0 --port {{ item.port }} --bind_ip localhost --dbpath {{ data_path }}/{{ item.name }}"
  with_items: "{{ rs_servers }}"
  delegate_to: localhost
  when: true
  tags: ["init", "rebuild", "config"]

- name: Get MongoDB Replica Set Status
  command: "mongo --port {{ rs_servers[0].port }} --eval 'rs.status()'"
  delegate_to: localhost
  ignore_errors: true
  register: rs_status_result
  when: true
  tags: ["init", "rebuild"]

- name: Set Replica Set Init settings js
  template:
    src: "templates/rsconf.init.js.j2"
    dest: "/tmp/rsconf.init.js"
  delegate_to: localhost
  when: true
  tags: ["init", "rebuild"]

- name: Init MongoDB Replica Set
  command: mongo --port "{{ rs_servers[0].port }}" < /tmp/rsconf.init.js
  delegate_to: localhost
  ignore_errors: true
  register: rs_init_result
  when: true
  tags: ["init", "rebuild"]
#    when: '"NotYetInitialized" in rs_status_result.stdout'

- name: Set Replica Set Init settings js
  template:
    src: "templates/rsconf.reconfig.js.j2"
    dest: "/tmp/rsconf.reconfig.js"
  delegate_to: localhost
  when: true
  tags: ["init", "rebuild", "config"]

- name: Reconfig MongoDB Replica Set
  command: mongo --port "{{ rs_servers[0].port }}" < /tmp/rsconf.reconfig.js
  delegate_to: localhost
  ignore_errors: true
  register: rs_reconfig_result
  when: true
  tags: ["init", "rebuild", "config"]

# - debug: var=rs_init_result
#   tags: ['init', 'rebuild', 'config']

# - debug: var=rs_reconfig_result
#   tags: ['init', 'rebuild', 'config']

- name: Stop homebrew MongoDB Services
  command: "launchctl stop homebrew.mxcl.mongodb.plist"
  with_items: "{{ rs_servers }}"
  delegate_to: localhost
  ignore_errors: true
  when: true
  tags: ["init", "rebuild", "config"]

- name: Stop any previous MongoDB Services
  command: "launchctl stop ansible.mongodb-{{ item.name }}.plist"
  with_items: "{{ rs_servers }}"
  delegate_to: localhost
  ignore_errors: true
  when: true
  tags: ["init", "rebuild", "config"]

- name: Stop daemons
  command: "killall daemon"
  delegate_to: localhost
  ignore_errors: true
  when: true
  tags: ["init", "rebuild", "config"]

- name: Create the services files
  template:
    src: templates/mongodb.plist.j2
    dest: "{{ agents_dir }}/ansible.mongodb-{{ item.name }}.plist"
    owner: "{{ local_user }}"
    group: staff
    mode: "0644"
  with_items: "{{ rs_servers }}"
  become: true
  delegate_to: localhost
  tags: ["init", "rebuild", "config"]

- name: Unload mongodb services on startup
  command: "launchctl unload {{ agents_dir }}/ansible.mongodb-{{ item.name }}.plist"
  with_items: "{{ rs_servers }}"
  delegate_to: localhost
  when: true
  tags: ["init", "rebuild"]

- name: Load mongodb services on startup
  command: "launchctl load {{ agents_dir }}/ansible.mongodb-{{ item.name }}.plist"
  with_items: "{{ rs_servers }}"
  delegate_to: localhost
  when: true
  tags: ["init", "rebuild", "config", "start"]

- name: Start mongodb services on startup
  command: "launchctl start {{ agents_dir }}/ansible.mongodb-{{ item.name }}.plist"
  with_items: "{{ rs_servers }}"
  delegate_to: localhost
  when: true
  tags: ["init", "rebuild", "config", "start"]
